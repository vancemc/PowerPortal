using System;
using System.Configuration;
using System.ServiceModel;
using System.ServiceModel.Configuration;

namespace PowerPortal
{
    public class WebPortal
    {

        public static object InjectedServiceReference { get; set; }

        /// <summary>
        /// Injectable, Mockable Wrapper for creating a service reference. Use to support unit tests.
        /// </summary>
        /// <typeparam name="TWebSvcInterface">Web Interface type generated by svcutil</typeparam>
        /// <returns>Service reference that supports web services interface for type 'T'</returns>
        public static TWebSvcInterface CreateServiceReference<TWebSvcInterface>()
        {
            TWebSvcInterface serviceRef;

            if (InjectedServiceReference == null)
            {
                serviceRef = CreateSvcReference<TWebSvcInterface>();
            }
            else
            {
                serviceRef = (TWebSvcInterface)InjectedServiceReference;
            }

            return serviceRef;
        }

        public static T CreateSvcReference<T>()
        {
            string configBindingName = string.Empty;

            Uri uri = GetServiceEndpointUriFromAppConfig<T>(out configBindingName);

            T channel = CreateSvcReference<T>(uri, configBindingName);

            return channel;
        }

        public static T CreateSvcReference<T>(string url)
        {
            Uri uri = new Uri(url);

            string bindingName = string.Empty;

            GetServiceEndpointUriFromAppConfig<T>(out bindingName);

            T channel = CreateSvcReference<T>(uri, bindingName);

            return channel;
        }

        public static T CreateSvcReference<T>(Uri uri, string configBindingName)
        {
            EndpointAddress endpoint = new EndpointAddress(uri);

            BasicHttpBinding binding = new BasicHttpBinding(configBindingName);

            ChannelFactory<T> channelFactory = new ChannelFactory<T>(binding, endpoint);

            T channel = channelFactory.CreateChannel();

            return channel;
        }

        public static Uri GetServiceEndpointUriFromAppConfig<T>(out string bindingName)
        {
            bindingName = string.Empty;

            var contractName = typeof(T).Name;

            ConfigurationSection clientSection = ConfigurationManager.GetSection("system.serviceModel/client") as ConfigurationSection;

            ClientSection clientConfig =
                ConfigurationManager.GetSection(clientSection.SectionInformation.SectionName) as ClientSection;

            ChannelEndpointElementCollection endpoints = clientConfig.Endpoints;

            Uri endpointUrl = null;

            foreach (ChannelEndpointElement endpoint in endpoints)
            {
                if (endpoint.Contract.Equals(contractName))
                {
                    endpointUrl = endpoint.Address;
                    bindingName = endpoint.BindingConfiguration;
                    break;
                }
            }

            return endpointUrl;
        }
    }
}
